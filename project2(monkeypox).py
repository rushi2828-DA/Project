# -*- coding: utf-8 -*-
"""Project2(MonkeyPox)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pE85MHPHdgAysszJEXKLRaYRP2cyH2pS
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.dates as mdates

df=pd.read_csv('Monkey Pox Cases (World Wide) Split.csv')

df.shape

df.columns
df.info()
df.describe()

df.sample(5)

df.head()

df.tail()

df.isnull().sum()
df.isnull().mean()*100

# remove null values

# Fill missing values in 'Date' with the mode (most frequent date)
df['date'] = df['date'].fillna(df['date'].mode()[0])

# Fill missing values in 'Total Cases' with the mean
df['total_cases'] = df['total_cases'].fillna(df['total_cases'].mean())

# Fill missing values in 'Country' with 'Unknown'
df['location'] = df['location'].fillna('Unknown')

# Verify that there are no more null values
print(df.isnull().sum())

df.dropna()

df.info()
df.shape

df.isnull().sum()

df.dropna(subset=['new_cases_smoothed'])

df.isnull().sum()

# prompt: download cleaned_data.csv after removing numm values . file should be downloaded in csv

from google.colab import files

# The previous code filled some NaNs, but dropna() was called afterwards without assigning the result back to df
# This means the NaNs removed by dropna() were not saved back into the dataframe.
# Let's re-apply the null filling and then drop NaNs if any remain in critical columns

# Fill missing values in 'Date' with the mode (most frequent date)
df['date'] = df['date'].fillna(df['date'].mode()[0])

# Fill missing values in 'Total Cases' with the mean
df['total_cases'] = df['total_cases'].fillna(df['total_cases'].mean())

# Fill missing values in 'Country' with 'Unknown'
df['location'] = df['location'].fillna('Unknown')

# Drop rows where 'new_cases_smoothed' is NaN, as per the original code's intention
df_cleaned = df.dropna(subset=['new_cases_smoothed'])

# Display null counts after cleaning
print("Null values after cleaning:")
print(df_cleaned.isnull().sum())

# Save the cleaned DataFrame to a CSV file
df_cleaned.to_csv('cleaned_data.csv', index=False)

# Download the CSV file
files.download('cleaned_data.csv')

df_cleaned=df.dropna()

df.fillna(df.mean(numeric_only=True),inplace=True)

# Convert the 'date' column to datetime
df['date'] = pd.to_datetime(df['date'])

# Group by date and sum cases and deaths globally
daily_data = df.groupby('date')[['new_cases', 'new_deaths']].sum().reset_index()

# Plot
plt.figure(figsize=(12, 6))
plt.plot(daily_data['date'], daily_data['new_cases'], label='New Cases', color='blue')
plt.plot(daily_data['date'], daily_data['new_deaths'], label='New Deaths', color='red')
plt.title('Daily Monkeypox Cases and Deaths Over Time')
plt.xlabel('Month')
plt.ylabel('Count')
plt.legend()
plt.grid(True)

# Format x-axis to show only months
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b'))  # '%b' = short month name (e.g., Jan, Feb) #gca-get current access
plt.gca().xaxis.set_major_locator(mdates.MonthLocator())         # Tick every month

plt.tight_layout()
plt.show()